name: Deploy Project

on:
  push:
    branches:
      - develop

jobs:
  test_backend:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: 1234qwer
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install mySQL Client
        run: sudo apt-get install mysql-client

      - name: Run mySQL commands
        run: |
          mysql -h ${{ secrets.DATABASE_HOST }} -P 3306 -u ${{ secrets.DATABASE_USERNAME }} -p${{ secrets.DATABASE_PASSWORD }} -e "SHOW DATABASES;"

      - name: set env
        working-directory: ./back
        run: |
          echo DATABASE_HOST=${{ secrets.DATABASE_HOST }} > .env
          echo DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} >> .env
          echo DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} >> .env
          echo DATABASE_NAME=${{ secrets.DATABASE_NAME }} >> .env
          echo DATABASE_PORT=${{ secrets.DATABASE_PORT }} >> .env
          echo AWS_REGION=${{ secrets.AWS_REGION }} >> .env
          echo AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }} >> .env
          echo AWS_S3_SECRET_ACCESS_KEY=${{ secrets.AWS_S3_SECRET_ACCESS_KEY }} >> .env
          echo AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }} >> .env

      - name: Install dependencies of backend
        working-directory: ./back
        run: npm i

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: test node
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}  '
          export NVM_DIR="$HOME/.nvm"
          if [ -s "$NVM_DIR/nvm.sh" ]; then
            . "$NVM_DIR/nvm.sh"
          else
            echo "nvm.sh not found"
            exit 1
          fi

          nvm -v
          nvm use --lts
          node -v
          npm -v'

  test_mysql:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: check mysql
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          sudo service mysql status'

      - name: test mysql user
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          mysql -u ${{ secrets.DATABASE_USERNAME }} -h ${{ secrets.DATABASE_HOST }} -p${{ secrets.DATABASE_PASSWORD }} -e "SHOW DATABASES;"'

  test_node:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: test node
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          export NVM_DIR="$HOME/.nvm"
          if [ -s "$NVM_DIR/nvm.sh" ]; then
            . "$NVM_DIR/nvm.sh"
          else 
            echo "nvm.sh not found"
            exit 1
          fi

          nvm -v
          nvm use --lts
          node -v
          npm -v'

  test_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies of frontend
        working-directory: ./front
        run: npm i

  deploy_front:
    needs:
      - test_frontend
      - test_node
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Install dependencies of Front
        working-directory: ./front
        run: npm i

      - name: Build Front
        working-directory: ./front
        run: npm run build

      - name: Copy Files to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            rm -rf /var/www/front
            mkdir /var/www/front
            cd /var/www/front'
          rsync -avz -e "ssh" ./front/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/front

      - name: Restart Nginx
        run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo service nginx restart'

  deploy_backend:
    needs:
      - test_backend
      - test_node
      - test_mysql
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies of backend
        working-directory: ./back
        run: npm i

      - name: Run Test of backend
        working-directory: ./back
        run: npm run build

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Copy Files to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            rm -rf /var/www/backend
            mkdir /var/www/backend'
          rsync -avz -e "ssh" ./back/dist/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/backend
          rsync -avz -e "ssh" ./back/package.json ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/backend/package.json
          rsync -avz -e "ssh" ./back/tsconfig.json ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/backend/tsconfig.json
          rsync -avz -e "ssh" ./back/.env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/backend/.env
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              . "$NVM_DIR/nvm.sh"
            else 
              echo "nvm.sh not found"
              exit 1
            fi

            nvm use --lts
            cd /var/www/backend
            npm i --production
            echo "PORT=${{ secrets.DATABASE_PORT }}" > .env
            echo "">> .env
            echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
            echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env'

      - name: Start Server
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              . "$NVM_DIR/nvm.sh"
            else 
              echo "nvm.sh not found"
              exit 1
            fi

            nvm use --lts
            
            npm install -g pm2
            pm2 stop all
            pm2 start /var/www/backend/main.js --name backend'
