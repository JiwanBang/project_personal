name: Deploy Project

on:
  push:
    branches:
      - develop

jobs:
  test_backend:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        ports:
          - 3333:3306
        env:
          MYSQL_ROOT_PASSWORD: 1234qwer
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install mySQL Client
        run: sudo apt-get install mysql-client

      - name: Run mySQL commands
        run: |
          mysql -h "127.0.0.1" -P 3306 -u ${{ secrets.DATABASE_USERNAME }} -p${{ secrets.DATABASE_PASSWORD }} -e "SHOW DATABASES;"

      - name: set env
        working-directory: ./back
        run: |
          echo DATABASE_HOST=${{ secrets.DATABASE_HOST }} > .env
          echo DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} >> .env
          echo DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} >> .env
          echo DATABASE_NAME=${{ secrets.DATABASE_NAME }} >> .env
          echo DATABASE_PORT=${{ secrets.DATABASE_PORT }} >> .env
          echo AWS_REGION=${{ secrets.AWS_REGION }} >> .env
          echo AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }} >> .env
          echo AWS_S3_SECRET_ACCESS_KEY=${{ secrets.AWS_S3_SECRET_ACCESS_KEY }} >> .env
          echo AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }} >> .env

      - name: Install dependencies of backend
        working-directory: ./back
        run: npm i

      - name: Run Test of backend
        working-directory: ./back
        run: npm test

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: test node
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}  '
          export NVM_DIR="$HOME/.nvm"
          if [ -s "$NVM_DIR/nvm.sh" ]; then
            . "$NVM_DIR/nvm.sh"
          else
            echo "nvm.sh not found"
            exit 1
          fi

          nvm -v
          nvm use --lts
          node -v
          npm -v'

  test_mysql:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: check mysql
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          sudo service mysql status'

      - name: test mysql user
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          mysql -u ${{ secrets.DATABASE_USERNAME }} -p${{ secrets.DATABASE_PASSWORD }} -e "SHOW DATABASES;"'

  deploy_front:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Install dependencies of Front
        working-directory: ./project_board
        run: npm i

      - name: Build Front
        working-directory: ./project_board
        run: npm run build

      - name: Copy Files to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            rm -rf /var/www/front
            mkdir /var/www/front
            cd /var/www/front'
          rsync -avz -e "ssh" ./project_board/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/front

      - name: Restart Nginx
        run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo service nginx restart'
